class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  private boolean hitPaddle() {
    // TODO implement
    return false;
  }

  private boolean isOutOfBoundsAndLastLife() {
    // TODO implement
    return false;
  }
  
  private boolean isOutOfBounds() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlockAndLastLevel() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlock(){
    // TODO implement
    return false;
  }
  
  private boolean hitBlock(){
	   
    int nrBlocks = this.numberOfBlocks();
    setBounce(null);
    
    for(int i=0; i<numberOfBlocks()-1; i++) {
    	
    	
    		
    	PlayedBlockAssignment block = getBlock(i);
    	BouncePoint bp = calculateBouncePointBlock(block);
    	BouncePoint bounce = getBounce();
    	boolean closer = isCloser(bp, bounce);
    	if(closer == true) {
    		setBounce(bp);
    	}
    	return getBounce()!=null;
    }
  }
  
  private boolean hitWall() {
    // TODO implement
    return false;
  }
  
  // Actions
  
  private void doSetup() {
    // TODO implement
  }
  
  private void doHitPaddleOrWall() {
    // TODO implement
  }

  private void doOutOfBounds() {
    // TODO implement
  }

   private void doHitBlock(){
  
	   score = getScore();
	   
	   bounce = getBounce();
	   
	   PlayedBlockAssignment pblock = bounce.getHitBlock();
	   
	   Block block = pblock.getBlock();
	   
	   int bscore = block.getPoints();
	   
	   setScore(score+bscore);
	   
	   pblock.delete();
	   
	   bounceBall();
	   
	   return;
  }
   

  private void doHitBlockNextLevel() {
    // TODO implement
  }

   private void doHitNothingAndNotOutOfBounds(){
	   
	   double x = getCurrentBallX();
	   double y = getCurrentBallY();
	   
	   double dx = getBallDirectionX();
	   double dy = getBallDirectionY();
	   
	   setCurrentBallX(x+dx);
	   setCurrentBallY(y+dy);
	   
  }

  private void doGameOver() {
    // TODO implement
  }

}
