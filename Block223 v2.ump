namespace ca.mcgill.ecse223.block.model;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
}

class User {
   before constructor{
   		if (aUsername==null||aUsername==""){
   			throw new RuntimeException("The username must be specified.");
   		}
	}
   unique username;
   1 -> 1..2 UserRole roles;
}

class UserRole {
   abstract;
   password;
   before constructor{
      	if (aPassword==null||aPassword==""){
   			throw new RuntimeException("The password must be specified.");
   		}
   }
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   before constructor{
   		if (nrBlocksPerLevel <= 0){
   			throw new RuntimeException("The number of blocks per level must be greater than zero.");
   		}
   }
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 400; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   Integer nrBlocksPerLevel;
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
}

class Ball {
      before constructor{
   		if (minBallSpeedX <= 0){
   			throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   		}
   		if (minBallSpeedY <= 0){
   			throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
		}
   		if (ballSpeedIncreaseFactor <= 0){
   			throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");  
		}
   }
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   Double ballSpeedIncreaseFactor;
}

class Paddle {
      before constructor{
      	if (maxPaddleLength <= 0 || maxPaddleLength > 400){
   			throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 400");
      	}
      	if (minPaddleLength <= 0){
   			throw new RuntimeException("The minimum length of the paddle must be greater than zero");
      	}
      	
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   Integer minPaddleLength;
}
